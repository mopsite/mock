import{_ as a,c as o,o as t,ag as i}from"./chunks/framework.Bb1Gubb8.js";const k=JSON.parse('{"title":"Mock.mock()","description":"","frontmatter":{},"headers":[],"relativePath":"api/mock.md","filePath":"api/mock.md"}'),p={name:"api/mock.md"};function s(r,e,l,d,c,n){return t(),o("div",null,e[0]||(e[0]=[i('<h1 id="mock-mock" tabindex="-1">Mock.mock() <a class="header-anchor" href="#mock-mock" aria-label="Permalink to &quot;Mock.mock()&quot;">​</a></h1><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Mock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rurl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rtype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h2 id="详情" tabindex="-1">详情 <a class="header-anchor" href="#详情" aria-label="Permalink to &quot;详情&quot;">​</a></h2><p>根据数据模板生成模拟数据。</p><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h2><ul><li><p>rurl</p><p>可选。</p><p>表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。</p><p>例如 <code>/\\/domain\\/list\\.json/</code>、<code>&#39;/domian/list.json&#39;</code>。</p></li><li><p>rtype</p><p>可选。</p><p>表示需要拦截的 Ajax 请求类型。</p><p>例如 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等。</p></li><li><p>template</p><p>可选。</p><p>表示数据模板，可以是对象或字符串。</p><p>例如 <code>{ &#39;data|1-10&#39;:[{}] }</code>、<code>&#39;@EMAIL&#39;</code>。</p></li><li><p>function(options)</p><p>可选。</p><p>表示用于生成响应数据的函数。</p><ul><li><p>options</p><p>指向本次请求的 Ajax 选项集，含有 <code>url</code>、<code>type</code> 和 <code>body</code> 三个属性，参见 <a href="https://xhr.spec.whatwg.org" target="_blank" rel="noreferrer">XMLHttpRequest 规范</a>。</p></li></ul></li></ul><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><ul><li><p><code>Mock.mock(template)</code></p><p>根据数据模板生成模拟数据。</p><p><a href="https://jsfiddle.net/nuysoft/Y3rg6/7/" target="_blank" rel="noreferrer">JSFiddle</a></p></li><li><p><code>Mock.mock(rurl, template)</code></p><p>记录数据模板。当拦截到匹配 <code>rurl</code> 的 Ajax 请求时，将根据数据模板 <code>template</code> 生成模拟数据，并作为响应数据返回。</p><p><a href="https://jsfiddle.net/nuysoft/BeENf/6/" target="_blank" rel="noreferrer">JSFiddle</a></p></li><li><p><code>Mock.mock(rurl, function(options))</code></p><p>记录用于生成响应数据的函数。当拦截到匹配 <code>rurl</code> 的 Ajax 请求时，函数 <code>function(options)</code> 将被执行，并把执行结果作为响应数据返回。</p><p><a href="https://jsfiddle.net/nuysoft/2s5t5/15/" target="_blank" rel="noreferrer">JSFiddle</a></p></li><li><p><code>Mock.mock(rurl, rtype, template)</code></p><p>记录数据模板。当拦截到匹配 <code>rurl</code> 和 <code>rtype</code> 的 Ajax 请求时，将根据数据模板 <code>template</code> 生成模拟数据，并作为响应数据返回。</p><p><a href="https://jsfiddle.net/nuysoft/Eq68p/3/" target="_blank" rel="noreferrer">JSFiddle</a></p></li><li><p><code>Mock.mock(rurl, rtype, function(options))</code></p><p>记录用于生成响应数据的函数。当拦截到匹配 <code>rurl</code> 和 <code>rtype</code> 的 Ajax 请求时，函数 <code>function(options)</code> 将被执行，并把执行结果作为响应数据返回。</p><p><a href="https://jsfiddle.net/nuysoft/6dpV5/5/" target="_blank" rel="noreferrer">JSFiddle</a></p></li></ul>',9)]))}const u=a(p,[["render",s]]);export{k as __pageData,u as default};
